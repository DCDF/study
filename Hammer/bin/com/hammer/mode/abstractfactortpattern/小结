为创建一组相关或相互依赖的对象提供一个接口,而且无需指定他们的具体类

场景类中没有任何一个方法与具体实现类有关,对于一个产品来说,我们z还要知道它的工厂方法就可以直接产生一个产品对象无需关心它的实现类

优点:
	封装性:产品实现类不用高层模块关心只关心接口,不关心怎么创建出来的,只要知道对应的工厂类能创建出需要的对象
	
缺点:
	扩展困难,增加一个产品C就要在AbstractCreater中加一个方法,所有与之关联的都要修改(有毒代码),严重违反开闭原则
	产品族扩展困难,但是产品等级扩展很容易,横向扩展容易,纵向扩展难
场景定义:
	一个对象族(或者一组没有任何关系的对象)都有相同的约束
	ps:文本编辑器和图片查看器,windows和linux下功能界面相似但是代码实现不同,共同约束为操作系统