--------------------常用命令---------------------
小文件  cat example:cat readme.txt
大文件 more example:more readme.txt
滚动日志 tail -n 行数 -f 文件名 example:tail -n 100 -f GameServer.log
vim 尾行模式 q!不保存强制退出 wq!保存强制退出
vim 命令行模式 dd删一排
date "+%Y-%m-%d %H:%M:%S" 年-月-日 时:分:秒 展示
date -s "20210101 08:01:00" 设置时间
重启 reboot
关机 poweroff
进程查看 ps -a(所有线程,包含所有其他用户)  -u(用户以及其他信息) -x(显示没有控制终端的进程) example:ps -aux或ps aux
动态进程监控 top (强化版windows任务管理器) 
进程ID查询 pidof 进程名 example:pidof java
杀进程 kill -9(强制) 进程PID example:kill -9 1200
杀指定服务所有进程 killall 进程名 example:killall httpd
取消命令 ctrl+c
网卡配置和网络信息 ifconfig 重要信息 网卡名,inet参数后的ip,ether参数后的网卡地址(mac地址),RX,TX接收发送数据流量
系统内核系统版本信息 uname -a
系统负载 uptime (1分 5分 15分)
系统内存 free -h(以G和M显示,易读)
查看系统当前用户 who
登录记录 last
当前用户历史命令 history
清空历史命令history -c
重复使用历史命令 !历史命令编号
修改历史命令存储长度 /etc/profile文件中的HISTSIZE变量值,默认1000
当前用户历史命令存储在 ~/.bash_history
收集系统配置及架构信息并输出诊断文档 sosreport
用户当前所处工作目录 pwd
移动到当前用户家目录 cd ~
移动到其他用户家目录 cd ~username
返回上一个目录 cd -
查看文件 ls -a(全部文件包含隐藏) -l(文件属性) -d(查看目录属性而并非查看目录内文件)
查看文件前n行  head -n 行数
查看文件后n行 tail -n 行数
文本替换 tr 原字符 目标字符 example:cat readme.txt | tr [a-z] [A-Z] 把readme.txt中小写全替换为大写
统计文本 wc -l(行数) -w(单词数) -c(字节数)
查看文件时间 stat 文件名
裁剪行 cut 文件
裁剪列 cut -d分隔符 -f列数 文件名
***比对 biff
创建空白文件和修改文件时间 touch
创建目录 mkdir -p(循环创建嵌套关系的目录)
复制 cp -p(保留文件属性) -r(循环复制) -i(覆盖询问) -d(保留链接文件属性) -a(pdr效果)
剪切重命名 mv 原文件 新文件
删除 rm -f(强制删除,不询问)
提供无穷数据的文件夹 /dev/zero
按照指定大小和个数的数据块来复制文件或转换文件 dd -if(输入文件) -of(输出文件) -bs(每个块大小)  -count(复制块个数) example:dd if=/dev/zero of=560_file count=1 bs=560M
查看文件类型 file 文件名
解压压缩 tar -c(压缩) -x(解压) -t(查看有哪些文件) -z(以Gzip压缩或解压) -j(以bzip2压缩或解压) -v显示压缩解压过程 -f(目标文件名) -p(保留原始权限属性) -P(使用绝对路径压缩) -C(指定解压目录)
example:压缩tar -czvf 压缩包名 .tar 要打包的目录,解压tar -xzvf 压缩包名 -C(解压到的目录) /root/xxx
文本关键词搜索 grep -b(将可执行文件(binary)当作文本文件（text）来搜索)  -c(显示找到的行数) -i(忽略大小写) -n(显示行号) -v(反选没关键字的行) example:grep fuck /root/readme.txt
***按照指定条件查找文件 find (参数细看) example:find /etc -name "*myfloder*" -print

--------------------输入输出重定向---------------------
输入重定向
将文件作为命令的标准输入 命令 < 文件
从标准输入中读入,直到遇到分割符 命令 << 分隔符
输出重定向
将标准输出重定向到文件中(清空原有数据) 命令 > 文件
将错误输出重定向到文件中(清空原有数据) 命令 2> 文件
将标准输出重定向到文件中(追加原有数据后) 命令 >> 文件
将错误输出重定向到文件中(追加原有数据后) 命令 2>> 文件




